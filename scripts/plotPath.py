#!/usr/bin/env python

"""
This script generates a 2D plot of a pathway given two order parameters x and y."""

from optparse import OptionParser

parser=OptionParser()
parser.add_option('-x',dest='xFN',help='This is the x-coordinates for all the states')
parser.add_option('-y',dest='yFN',help='This is the y-coordinates for all the states')
parser.add_option('--xc',dest='xcol',type=int,help='The column in the x-data to use')
parser.add_option('--yc',dest='ycol',type=int,help='The column in the y-data to use')
parser.add_option('-p',dest='pathsFN',default='./Paths.h5',help='This is the paths file generated by DoTPT from msmbuilder')
parser.add_option('-a',dest='a',default=0,type=int,help='Path to start at')
parser.add_option('-b',dest='b',type=int,help='Path to plot up to. Default is len( paths )')
options,args = parser.parse_args()

from matplotlib.backends.backend_pdf import PdfPages
from matplotlib.pyplot import *
from numpy import *
from msmbuilder import Serializer

# First read in the data:
if options.xFN[-3:] == 'npy':
   X = load(options.xFN)
else:
   try: X = loadtxt(options.xFN)
   except: print "Cannot read file %s."% options.xFN; exit()
if options.yFN[-3:] == 'npy':
   Y = load(options.yFN)
else:
   try: Y = loadtxt(options.yFN)
   except: print "Cannot read file %s."% options.yFN; exit()

if len( X.shape ) > 1:
   print "X formatted strangely... Need to choose a column"
   if not options.xcol:
      print "Need to input the column to use as --xc!"
      print "Continuing using column 0. Careful this could give wacky results!"
      X = X[:,0]
   else:
      X = X[:,options.xcol]

if len( Y.shape ) > 1:
   print "Y formatted strangely... Need to choose a column"
   if not options.ycol:
      print "Need to input the column to use as --yc!"
      print "Continuing using column 0. Careful this could give wacky results!"
      Y = Y[:,0]
   else:
      Y = Y[:,options.ycol]

P = Serializer.Serializer.LoadFromHDF(options.pathsFN)

N = len( P['Paths'] )

figure()
if not options.b:
	options.b = N - 1

name = '.'.join( options.pathsFN.split('/')[-1].split('.')[:-1] )
Xname = '.'.join( options.xFN.split('/')[-1].split('.')[:-1] )
Yname = '.'.join( options.yFN.split('/')[-1].split('.')[:-1] )
outFN = '%s_%d-%d_%sVS%s.pdf' % (name,options.a,options.b,Yname,Xname)

pp = PdfPages( outFN )
figure()
for i in range(options.a, options.b+1, 1):
	path = P['Paths'][i]
	Bneck = P['Bottlenecks'][i]
	flux = P['Fluxes'][i]

	path = path[ where( path != -1 ) ]
	path = array([ int(thing) for thing in path ])
	tempX = X[path]
	tempY = Y[path]

	plot( tempX, tempY,linestyle='-',color='black',marker='o')

	plot( X[Bneck],Y[Bneck],linestyle='',marker='*',color='red')
	title("Flux = %E" % flux )
	xlabel(Xname)
	ylabel(Yname)
	xlim([0,1])
	ylim([0,1])
	pp.savefig()
	figure()

pp.close()



