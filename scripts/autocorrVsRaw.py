#!/usr/bin/env python -u

from optparse import OptionParser
parser = OptionParser()
parser.add_option('--rd','--raw-data',dest='rawFN',help='Raw data for all the trajectories. Be sure this corresponds to ALL of the trajectories...')
parser.add_option('--nt','--num-trajs',dest='nTraj',type=int, default=1,help='Number of raw trajectories to plot')
parser.add_option('--md',dest='msmFN',default='./MSMAutocorrelation.hdf', help='MSM autocorrelation dictionary. Generated by GetMSMAutocorrelation')
parser.add_option('-p','--proj-info',dest='projFN',default='./ProjectInfo.h5',help='ProjectInfo.h5 generated by msmbuilder')
parser.add_option('-d',dest='divisor',type=float,default=1,help='Divisor to convert frames to time')
parser.add_option('--units',dest='units',default='frames',help='Units to print on x-axis')
options, args = parser.parse_args()

from msmbuilder import Serializer
from schwancrtools import autocorrelate
from numpy import *
from pyschwancr.dataIO import readData as rd
from pyschwancr.dataIO import writeData as wd
import os
import matplotlib
matplotlib.use('pdf')
from matplotlib.pyplot import *
matplotlib.rcParams['font.size']=22

def rawObs( trajNum, lens, data ):
	
	trjData = data[ lens[:trajNum].sum() : lens[:trajNum].sum()+lens[trajNum] ]

	return trjData

def plotData( msmDict, rawList, trajNums ):
	global options


	figure()
	axes( (0.18,0.18,0.64,0.64) )
	plot( arange( len(rawList[0]) ) / options.divisor, rawList[0], color='blue',label='Raw Data' )
	for i in arange( len(trajNums) )[1:]:
		xRaw = arange(len(rawList[i]))
		plot(xRaw / options.divisor ,rawList[i],color='blue')

	xMSM = concatenate( ( msmDict['timescale'], [xlim()[1]] ) )
	#xMSM[0] = 1
	yMSM = concatenate( ( msmDict['autocorrelation'], [0] ) )

	plot( xMSM / options.divisor, yMSM, color='red', label = 'MSM', lw=3,alpha=0.75)
	
	xlim([0,xlim()[1]])
	legend(loc=0,prop={'size':18})
	ylim([ -0.4, 1.2])
	xscale('symlog')
	xticks( xticks()[0][1:] )
	xlabel('Time (%s)'%options.units, fontsize=27 )
	ylabel('RMSD ACF', fontsize=27)
	#title('Autocorrelation Function %s' % options.rawFN.split('/')[-1].split('.')[-2] )
		
	savefig( 'MSM_vs_Raw_RMSD_autocorrs.pdf' )
def main():

	print "Reading data...",
	print " %s."% options.rawFN,
	raw = rd( options.rawFN )
	print " %s." % options.projFN,
	P = Serializer.LoadFromHDF( options.projFN )
	print " %s." % options.msmFN
	msmDict = Serializer.LoadFromHDF( options.msmFN ) 

	lens = [ ( P['TrajLengths'][i], i ) for i in range( P['TrajLengths'].shape[0] ) ]
	lens = sorted(lens,reverse=True)

	print lens
	
	trajList = [ b for (a,b) in lens[:options.nTraj] ]
	print trajList
	# Generate the trajectory data:
	trajData = []
	
	for traj in trajList:
		trajData.append( array(rawObs( traj, P['TrajLengths'], raw ) ) )

	# Generate the autocorrelations:
	print "Calculating the convolutions ... "
	trajCorr = [ autocorrelate.fft_autocorrelate( thing ) for thing in trajData ]

	print "Plotting the data ... "
	plotData( msmDict, trajCorr, trajList )
if __name__ == '__main__':
	main()
