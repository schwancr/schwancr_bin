#!/usr/bin/env python

from optparse import OptionParser
parser = OptionParser()
parser.add_option('-p',dest='proj_FN',default='../ProjectInfo.h5',help='ProjectInfo.h5 generated by msmbuilder [ ../ProjectInfo.h5 ]')
parser.add_option('-a',dest='ass_FN',default='./Assignments.Fixed.h5',help='Assignments from msmbuilder [ ./Assignments.Fixed.h5 ]')
parser.add_option('-r',dest='raw_FN',help='Raw data to plot against it\'s average')
parser.add_option('-m',dest='msm_FN',help='Average data for each state')
parser.add_option('-u',dest='stride',type=int,help='Stride to color some data with')
options, args = parser.parse_args()

from numpy import *
import matplotlib
matplotlib.use('agg')
from matplotlib.pyplot import *
from pyschwancr import dataIO
from msmbuilder import Project

print "Loading Data"
Proj = Project.Project.LoadFromHDF( options.proj_FN )
Ass = Project.Serializer.LoadData( options.ass_FN ).astype( int )
Raw = dataIO.readData( options.raw_FN )
if len( Raw.shape ) > 1:
	print "Using column 0 of raw data..."
	Raw = Raw[:,0]
Avg = dataIO.readData( options.msm_FN )

# Reformat the raw data to the assignments style:
fmtRaw = ones( Ass.shape ) * -1
lengthSum = 0
for i in range( len( Proj['TrajLengths'] ) ): 
	fmtRaw[i][:Proj['TrajLengths'][i]] = Raw[ lengthSum : lengthSum + Proj['TrajLengths'][i] ]
	lengthSum += Proj['TrajLengths'][i]
# The above may not seem necessary, since we reformat it and then make it 1D again,
#  but since there may be trimmed states, we need to remove them, This was the best way I saw to do that.

Avg1D = Avg[:,1][ Ass[ where( Ass != -1 ) ] ].flatten()
Raw1D = fmtRaw[ where( Ass != -1 ) ].flatten()

clusteredConfs = zeros( Ass.shape )
clusteredConfs[:, arange( Ass.shape[1] )[::options.stride] ] = 1
clusteredConfs[ where( Ass == -1 ) ] = -1
print len( where( clusteredConfs == 0 )[0] )
print len( where( clusteredConfs == 1 )[0] )
Avg1D_cluster = Avg[:,1][ Ass[ where( (clusteredConfs == 1)*(Ass != -1) ) ] ]
Raw1D_cluster = fmtRaw[ where( clusteredConfs == 1 ) ]
Avg1D_assign = Avg[:,1][ Ass[ where( clusteredConfs == 0 ) ] ]
Raw1D_assign = fmtRaw[ where( clusteredConfs == 0 ) ]
f = figure()
f.set_figwidth(25)
Raws = [ Raw1D, Raw1D_cluster, Raw1D_assign ]
Avgs = [ Avg1D, Avg1D_cluster, Avg1D_assign ]

LBLs = [ 'All Data', 'Clustered Data', 'Assigned Data' ]
for i in range(3):
	subplot( 131 + i )
	plot( Raws[i], Avgs[i], '.' )
	xlabel( '.'.join( options.raw_FN.split('/')[-1].split('.')[:-1] ) )
	ylabel( '.'.join( options.msm_FN.split('/')[-1].split('.')[:-1] ) )
	title( "%s vs %s %s" % ( gca().get_xlabel(), gca().get_ylabel(), LBLs[i] ) )
	xlim([0, max([ 1, ylim()[1], xlim()[1] ])])
	ylim([0, xlim()[1] ])
	plot([0,xlim()[1]],[0,ylim()[1]],color='red')

	text( 0.1* xlim()[1], 0.9*ylim()[1], 'Corr Coef = %.4f' % corrcoef( Avgs[i], Raws[i])[0,1] )

savefig('%sVsAvg.png' % gca().get_xlabel() )
print "Saved plot to %sVsAvg.png" % gca().get_xlabel()

