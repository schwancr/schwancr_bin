#!/usr/bin/env python

from optparse import OptionParser
parser = OptionParser()
parser.add_option('-a',dest='ass_FN',default='./Assignments.Fixed.h5',help='Assignments file generated by msmbuilder')
parser.add_option('-d',dest='assRMSD_FN',default='./Assignments.h5.RMSD',help='RMSD to generator file generated by msmbuilder')
parser.add_option('-p',dest='proj_FN',default='../ProjectInfo.h5',help='ProjectInfo.h5 generated by msmbuilder')
parser.add_option('-s',dest='stateList',action='append',type=int,help='States to plot')
parser.add_option('-n',dest='numStates',type=int,help='Number of states to randomly sample. Choose either -s or -n. If both are given, -n is ignored')
options, args = parser.parse_args()

import matplotlib
matplotlib.use('Pdf')
from matplotlib.pyplot import *
from msmbuilder import Project, DistanceMetric
from numpy import *
from random import randint
RMSD = DistanceMetric.RMSDMetric()

def getPWrmsds( confs ):

	prepConfs = RMSD.PrepareData( confs )
	# Now go through and calculate the rmsds for each conformation:

	PW_rmsds = zeros( ( len( confs ), len( confs ) ) )

	for i in xrange( len( confs ) ):
		PW_rmsds[i,:] = RMSD.GetFastMultiDistance( prepConfs, prepConfs, i )
	
	return PW_rmsds


def main():
	# First load all the data:
	proj = Project.Project.LoadFromHDF(options.proj_FN)
	ass = Project.Serializer.LoadData(options.ass_FN)
	assRMSD = Project.Serializer.LoadData(options.assRMSD_FN)
	maxState = ass.max()
	if options.stateList:
		States = options.stateList
	elif options.numStates:
		count = 0
		States = ones( options.numStates ) * -1 # Set all to -1 so that I can check to see if a state has been selected using where ( there are no -1 states )
		while ( -1 in States and count <= 10000 ):
			count += 1
			testInt = randint( 0, maxState )
			if not testInt in States:
				States[ where( States==-1 )[0][0] ] = testInt
	else:
		print "Need to use '-s' or '-n' to indicate what states or how many to sample"


	print "Will do calculations on these states:"
	print States
	# Now get the indices (traj, frame) for the assignments to a particular state:
	print "Loaded data."

	for state in States:
		print "\n=============================================="

		# ------------------------------
		# Calculating the rmsd Matrix
		# ------------------------------
		stateInd = array( where( ass == state ) ).T # Transpose to get an Nx2 array rather than 2xN
		if stateInd.shape[0] < 10:
			print "Skipping state %d since it only has %d conformations" % ( state, stateInd.shape[0] )
			continue
		print "Analyzing state %d and its %d conformations ... " % ( state, stateInd.shape[0] )

		confsTraj = proj.GetConformations( stateInd )
		
		rmsdMtx = getPWrmsds( confsTraj['XYZList'] )
			
		rmsds2plot = rmsdMtx[ where( eye(rmsdMtx.shape[0]) == 0)].flatten()  # Indexing by zeros in identity matrix returns only the off diag elements!
		# ------------------------------
		# Plotting the distribution of Pair-wise RMSDs
		# ------------------------------

		figure()
		hist( rmsds2plot, bins=50, histtype='step' )
		title( "Pair-wise RMSDs within State %d" % state )
		xlabel( "RMSD (nm)" )
		ylabel( "Frequency" )
		xlim( [0, xlim()[1]] )
		ylim( [0, ylim()[1]] )
		text( xlim()[1] * 0.1, ylim()[1] * 0.9, "N = %d" % rmsdMtx.shape[0] )
		savefig( "PW_rmsds_state_%d.pdf" % state )
		
		print "\tSaved plot to PW_rmsds_state_%d.pdf" % state
		# ------------------------------
		# Plotting the RMSD matrix
		# ------------------------------
		
		avgs = rmsdMtx.sum(0) / ( rmsdMtx.shape[0] - 1.) # Divide by N-1 since the 0 on the diagonal shouldn't count

		newInd = argsort( avgs )
			
		figure()
		matshow( rmsdMtx[newInd,:][:,newInd] )
		colorbar()
		title( "Pair-wise RMSD matrix State %d" % state )

		savefig( "PW_rmsds_mtx_state_%d.pdf" % state )		
		
		print "\tSaved matrix plot to PW_rmsds_mtx_state_%d.pdf" % state 

		# ------------------------------
		# Plotting the distribution of RMSD to native state
		# ------------------------------

		rmsd2N = RMSD.GetMultiDistance( confsTraj['XYZList'], confsTraj['XYZ'] )

		figure()
		hist( rmsd2N, bins=30, histtype='step' )
		title( "Distribution of RMSD to Native State in State %d" % state )
		xlim([0,xlim()[1]])
		ylim([0,ylim()[1]])
		xlabel( "RMSD (nm)")
		ylabel( "Frequency")
		text( xlim()[1] * 0.1, ylim()[1] * 0.9, "N = %d" % rmsdMtx.shape[0] )
		savefig( "RMSD_toNative_state_%d.pdf" % state )
		print "\tSaved RMSD to native plot to RMSD_toNative_state_%d.pdf" % state 

		# ------------------------------
		# Plotting the RMSD to N vs. PW rmsd avg
		# ------------------------------
		
		figure()
		scatter( rmsd2N, avgs )

		xlim([0, xlim()[1]] )
		ylim([0, ylim()[1]] )
		xlabel("RMSD to Native State")
		ylabel("Average Pair-wise RMSD to other confs" )
		title("Average pair-wise RMSD vs RMSD to Native State in State %d" % state )

		savefig("PW_rmsds_vs_rmsd2N_state_%d.pdf" % state )
		print "\tSaved PW rmsd vs RMSD to N to PW_rmsds_vs_rmsd2N_state_%d.pdf" % state 
	

		#-------------------------------
		# Plotting the RMSD to the generator distribution
		#-------------------------------
		
		rmsd2Gen = assRMSD[ where( ass == state ) ]
		figure()
		hist( rmsd2Gen, bins=30, histtype='step')
		xlim([0, xlim()[1] ])
		ylim([0, ylim()[1] ])
		xlabel( 'RMSD to Generator (nm)' )
		ylabel( 'Frequency' )
		title( "Distribution of RMSD to Generator in State %d" % state )
		savefig( "RMSD_toGen_state_%d.pdf" % state )
		print "\tSaved RMSD to Generator distribution to RMSD_toGen_state_%d.pdf" % state

		#------------------------------
		# Plotting the RMSD to the generator vs PW rmsd avg
		#------------------------------

		figure()
		scatter( rmsd2Gen, avgs )
		xlim([0, xlim()[1]])
		ylim([0, ylim()[1]])
		xlabel("RMSD to Generator (nm)" )
		ylabel("Average Pairwise RMSD (nm)" )
		title("Average pair-wise RMSD vs RMSD to Generator in State %d" % state )
		
		savefig("PW_rmsds_vs_rmsd2Gen_state_%d.pdf" % state )
		print "\tSaved PW rmsd vs RMSD to Generator to PW_rmsds_vs_rmsd2Gen_state_%d.pdf" % state

		#-----------------------------
		# Plotting the RMSD to gen vs RMSD to N
		#-----------------------------
		figure()
		scatter( rmsd2Gen, rmsd2N )
		xlim([0, xlim()[1]])
		ylim([0, ylim()[1]])
		xlabel("RMSD to Generator (nm)" )
		ylabel("RMSD to Native State (nm)" )
		title("RMSD to Native State vs RMSD to Generator in State %d" % state )
		
		savefig("rmsd2N_vs_rmsd2Gen_state_%d.pdf" % state )
		print "\tSaved RMSD to N vs RSMD to Generator to rmsd2N_vs_rmsd2Gen_state_%d.pdf" % state 

if __name__ == '__main__':
	main()











