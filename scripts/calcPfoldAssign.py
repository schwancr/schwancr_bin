#!/usr/bin/env python

from optparse import OptionParser
parser = OptionParser()
parser.add_option('-t','--traj-dir',dest='trj_dir',help='Directory to look for xtc\'s')
parser.add_option('-u','--unfolded-states',dest='uFN',help='Unfolded states (flat text)')
parser.add_option('-f','--folded-cutoff',dest='fFN',help='Folded states (flat text)')
parser.add_option('-g','--generators',dest='gens_FN',help='gens.lh5 file containing the generators')
parser.add_option('-m','--map-file',dest='map_FN',help='Mapping.dat generated by msmbuilder')
parser.add_option('-P','--procs',dest='procs',default=1,type=int, help='Number of procs to use in the calculation')

options, args = parser.parse_args()

from numpy import *
from msmbuilder.xtc import XTCReader, readxtc
import re
import sys
from msmbuilder import Clustering, Trajectory
import os
import multiprocessing as mp

F_states = loadtxt(options.fFN,int)
U_states = loadtxt(options.uFN,int)
gens = Trajectory.Trajectory.LoadFromLHDF(options.gens_FN)
clstr = Clustering.Clusterer()

def analyzeTrajectory(trajFN):
# this function will analyze a trajectory for native contacts in the toTestLists
   global U_states
   global F_states
   #print "Analyzing trajectory: %s ..." % trajFN
   coords = readxtc( trajFN, atomindices = range(128) )
   
   # Assignment stuff
   #AssList = clstr.Assign(Generators=gens['XYZList'],XYZData=array(coords))
   #for ass in AssList:
   for frame in coords:
      ass,rmsd = clstr.Assign(Generators=gens['XYZList'],XYZData=array([frame]))
      ass =  ass[0]
      if ass in U_states:
         return 0
      elif ass in F_states:
         return 1

   return -1

def main():
   global gens
   map = loadtxt(options.map_FN,int)
   gens['XYZList'] = gens['XYZList'][ where( map >= 0 ) ]
   print 
   output = []
   trajList = [ os.path.join( options.trj_dir, thing) for thing in os.listdir(options.trj_dir) if thing[-4:] == '.xtc' ]



   pool = mp.Pool(options.procs)
   result = pool.map_async(analyzeTrajectory,trajList)
   result.wait()

   sol = array(result.get())
   savetxt('sol.dat',sol)
   folded = len( where( sol == 1 )[0] ) 
   unfolded = len( where( sol == 0 )[0] )
   neither = len( where( sol == -1 )[0] )
   total = len( sol )
   print "Folded = %d Unfolded = %d Neither = %d Total = %d " % ( folded, unfolded, neither, total )

   return 0
if __name__=='__main__':
   main()      

